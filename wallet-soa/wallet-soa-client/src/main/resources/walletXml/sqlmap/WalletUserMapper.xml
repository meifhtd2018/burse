<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="WalletUserMapper">
	<resultMap id="BaseResultMap" type="com.hnair.consumer.wallet.model.WalletUser">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="wallet_id" property="walletId" jdbcType="BIGINT" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="application_code" property="applicationCode" jdbcType="INTEGER" />
		<result column="account_name" property="accountName" jdbcType="VARCHAR" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Where">
		<if test="id != null"> and id= #{id}</if>	
		<if test="walletId != null"> and wallet_id= #{walletId}</if>	
		<if test="userId != null and userId !=''"> and user_id= #{userId}</if>
		<if test="applicationCode != null"> and application_code= #{applicationCode}</if>	
		<if test="accountName != null and accountName !=''"> and account_name= #{accountName}</if>
		<if test="phone != null and phone !=''"> and phone= #{phone}</if>
	</sql>
	<sql id="Base_Column_List">
		id ,
		wallet_id ,
		user_id ,
		application_code ,
		account_name ,
		phone 
	</sql>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from wallet_user
		where
		id = #{id,jdbcType=BIGINT}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from wallet_user
		where
		id = #{id,jdbcType=BIGINT}
	</delete>

	<insert id="insertSelective" parameterType="com.hnair.consumer.wallet.model.WalletUser">
		insert into wallet_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">id,</if>	
			<if test="walletId != null">wallet_id,</if>	
			<if test="userId != null and userId !=''">user_id,</if>
			<if test="applicationCode != null">application_code,</if>	
			<if test="accountName != null and accountName !=''">account_name,</if>
			<if test="phone != null and phone !=''">phone,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="walletId != null">
				#{walletId,jdbcType=BIGINT},
			</if>
			<if test="userId != null and userId !=''">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="applicationCode != null">
				#{applicationCode,jdbcType=INTEGER},
			</if>
			<if test="accountName != null and accountName !=''">
				#{accountName,jdbcType=VARCHAR},
			</if>
			<if test="phone != null and phone !=''">
				#{phone,jdbcType=VARCHAR},
			</if>
			
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective" parameterType="com.hnair.consumer.wallet.model.WalletUser">
		update wallet_user
		<set>
			<if test="walletId != null">
				wallet_id= #{walletId,jdbcType=BIGINT},
			</if>
			<if test="userId != null and userId !=''">
				user_id= #{userId,jdbcType=VARCHAR},
			</if>
			<if test="applicationCode != null">
				application_code= #{applicationCode,jdbcType=INTEGER},
			</if>
			<if test="accountName != null and accountName !=''">
				account_name= #{accountName,jdbcType=VARCHAR},
			</if>
			<if test="phone != null and phone !=''">
				phone= #{phone,jdbcType=VARCHAR}
			</if>
		</set>
		where
		id = #{id,jdbcType=BIGINT}
	</update>

	<select id="getAll" resultMap="BaseResultMap" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from wallet_user where 1=1
		<include refid="Base_Where" />
	</select>
	<select id="pageCount" resultType="java.lang.Integer" parameterType="map">
		select count(1) from wallet_user where 1=1
		<include refid="Base_Where" />
	</select>

	<select id="selectByIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from wallet_user where id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>


	<select id="pageData" resultMap="BaseResultMap" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from wallet_user where 1=1
		<include refid="Base_Where" />
		ORDER BY
		create_time DESC
		LIMIT #{start},#{limit}
	</select>

</mapper>
